Bajtocja is very excited about the recent release of a new platform
for watching movies and series - Bitflix. Bitflix allows you to watch
movies that are described by duration (int), release year (int),
genre (string) and director (author). The platform also offers series
that are only described by genre (string) and showrunner (author)
and consist of episodes that have a duration (int), release year (int)
and director (author). The authors of films and series (directors and showrunners)
also have additional information in the form of first name (string)
and surname (string), year of birth (int) and the number of awards received (int).

Possible representations:
	0 - Base representation. Objects with references - references are used for connections between objects.
		Movie
			- title (string)
			- genre (string)
			- director (author ref)
			- releaseYear (int)
			- duration (int)
			
		Series
			- title (string)
			- genre (string)
			- showrunner (author ref)
			- episodes (list of episodes refs)
			
		Episode
			- title (string)
			- duration (int)
			- releaseYear (int)
			- director (author ref)
		
		Author
			- name (string)
			- surname (string)
			- birthYear (int)
			- awards (int)
			
	1. Objects with indexes - like 0. but each type is stored in separate map (keyed by int).
	Instead of references objects store ID(int) corresponding to referenced object.

	2. Text - all objects are represented as single string containing all the data in format specified below.
	References to objects are handled like 1.
		Movie - "<title>;<genre>(<releaseYear>/<duration>)@(<author id>)"
		Series - "<title>;<genre>@(<showrunner id>)-(<episode id>),..."
		Episode - "<title>/<duration>(<releaseYear>);(<author id>)"
		Author - "<name>+<surname>+<birthYear>^<awards>^"
		
		Notation used:
			<-> - value ( - is a name of field)
			[-] - optional ( - is a name of field)
			-,... - possible repetitions ( - is a string of tokens that can logically repeat)
		
	3. Partial text - some fields contain nonatomic data. Mix between objects with references and text representations.
	References to objects are handled like 1.
		Film
			- title - "<title>(<releaseYear>)"
			- genre (string)
			- director "<author id>"
			- duration (int)
			
		Serial
			- title - "<title>/<genre>" 
			- showrunner "<author id>"
			- episodes "<episode id>,..."
			
		Episode
			- title (string)
			- duration (int)
			- releaseYear (int)
			- director "<author id>"
			
		Author - "<name>+<surname>+<birhYear>^<awards>^"

	4. Hashmap - representation like 1., but every non-reference field is key (long) in common map int->string. 
		Each key is C# hash of that string (using builtin C# hash).

	5. Semi-binary format: Each class have additional field named "data" which is array of bytes. Rest is like 
	in 1., but instead of each field we have "<fieldname>_addr" and "<fieldname_count>". "<fieldname>_addr" 
	is address (index) of data of that field in array "data" and "<fieldname_count>" is number of elements 
	(in case of list type - number of elements, otherwise 1, if element is optional it may be 0 and _addr doesn't matter).

	6. Each object is represented by unique integer identifer. All data is kept in one map string->string. 
	Representation is a bit similar to 1. but data is accesed as string in that map. Additionally "<fieldname_count>" 
	like in representation 6. Data is accessed like "<id>.<fieldname>[idx]". So to eg. access title of serial 3 use 
	string "3.title[0]" and to access second episode (id) of that serial - "3.episode[1]". To access number of episodes of that 
	serial use "3.episodes.count" 

	7. Representation like 1. but instead of class we use list of pairs (fieldname, value). 
	So have List<Tuple<string, Object>> to represent each class. That value of type Object must 
	be casted to propter type to be used.
